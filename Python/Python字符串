Python字符串

【msg = 'hello'或msg = r'hello'】：
1.对列表的许多操作，也可以作用于字符串：按下标取值、切片、用于for循环、用于len()、以及用于in和not in操作符。
2.字符串是不可变的，“改变”一个字符串的正确方式，是使用切片和连接，构造一个新的字符串。
3.由于反斜杠\在Python中被视为转义标记，故用字符串表示路径时，尤其在Windows系统中，应以应以原始字符的方式指定路径，即在开头的单引号前加上r，或者使用双反斜杠。

【"""content"""】
python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。



Python字符串前面加u，r，b的含义：
u/U：表示Unicode字符串
    声明后面字符串以Unicode格式进行编码，一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。
    不是仅仅是针对中文，可以针对任何的字符串，代表是对字符串进行unicode编码。
    一般英文字符在使用各种编码下，基本都可以正常解析, 所以一般不带u；但是中文，必须表明所需编码, 否则一旦编码转换就会出现乱码。

r/R：非转义的原始字符串
    声明后面的字符串是普通字符串，没有转义特殊或不能打印的字符。
    特殊的字符串中可能包含转义字符，即那些反斜杠加上对应字母，表示对应特殊含义的，比如最常见的"\n"表示换行，"\t"表示Tab等。而如果是以r开头，那么说明后面的字符都是普通的字符了，即如果是"\n"那么表示一个反斜杠字符，一个字母n，而不是表示换行了。
    以r开头的字符，常用于正则表达式，对应着re模块。

b：bytes
    python3.x里默认的str是(python2.x里的)unicode, bytes是python2.x的str, b''前缀代表的就是bytes。


Python字符串格式化：
Python支持格式化字符串的输出。在Python中，字符串格式化使用与C中sprintf()函数一样的语法。如print("我叫%s今年%d岁!"%('小明', 10.1))输出结果：我叫小明今年10岁!



title()方法：以首字母大写的方式显示每个单词。
upper()方法：将字符串改为全部大写。
lower()方法：将字符串改为全部小写。

strip()方法：剔除字符串两端的空白。
lstrip()方法：剔除字符串开头的空白。
rstrip()方法：剔除字符串末尾的空白。

isspace()方法：判断字符串是否全部是空格。
isdigit()方法：检测字符串是否只由数字组成。

split()方法：拆分
    content.split(chars, maxsplit=k) 或 str.split(content, chars, maxsplit=k)
    通过指定分隔符（chars）对字符串（content）进行切片，如果参数maxsplit有指定值k，则仅分隔k个子字符串。
    注：(1)无参调用，不指定任何分隔符，chars默认为所有的空字符，包括空格、换行（\n）、制表符（\t）等，split()会自动删除字符串前导、尾随以及连续的空格，区别于用空格作为分隔符（.split(' ')）。
    (2)使用maxsplit对拆分进行限定时，split()把对象拆分为(k+1)部分(k=0时不拆分，k为负数时相当于无maxsplit参数)。
    (3)split()方法返回的对象是一个列表。

join()方法：拼接
    chars.join(sequence)
    将序列（sequence）中的元素以指定的字符（chars）连接生成一个新的字符串。如'.'.join('a', 'b', 'c')，输出"a.b.c"。
    注：字符串方法不支持就地操作（直接更改被调用的对象，如对列表使用的.append()方法），但它们会在内存中返回一个新对象。

find()方法：查询
    str1.find(str2, beg=0, end=len(str1))
    检测字符串str1中是否包含子字符串str2，如果指定beg（开始）和end（结束）范围，则检查是否包含在指定范围内。如果指定范围内如果包含指定索引值，返回的是索引值在字符串中的起始位置。如果不包含索引值，返回-1。
rfind()方法：
    类似于find()，不过是从右边开始查找。

index()方法：
    str1.index(str2, beg=0, end=len(string))
    检测字符串str1中是否包含子字符串str2，如果指定beg（开始）和end（结束）范围，则检查是否包含在指定范围内。与find()方法一样，如果指定范围内如果包含指定索引值，返回的是索引值在字符串中的起始位置。但是如果不包含索引值，Python就报ValueError。
rindex()方法：
    类似于index()，不过是从右边开始.

replace()方法：替换
    content.replace(old, new[, max])
    把字符串（content）中的old（旧字符串）替换成new（新字符串），如果指定第三个参数max，则替换不超过max次。



str()函数：返回传递给它的值的字符串形式。
int()函数：返回传递给它的值的整数形式。
float()函数：返回传递给它的值的浮点数形式。


'{:,}'.format()
千位分隔符

'{:.2f}'.format(1)  # '1.00' 字符串的方法，python3能用

'%.2f' % 1  # '1.00' 表达式，Python2、3都能用


%s	 格式化字符串
%d	 格式化整数
%o	 格式化无符号八进制数
%x	 格式化无符号十六进制数
%X	 格式化无符号十六进制数（大写）
%f	 格式化浮点数字，可指定小数点后的精度

-	用做左对齐
+	在正数前面显示加号( + )
0	显示的数字前面填充'0'而不是默认的空格
m.n	 m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)
#	在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')


"{0:^5}".format('1234567890')
'1234567890'

"{0:^15}".format('1234567890')
'  1234567890   '

"{1:^15}".format('1234567890', '11')
'      11       '

'{:.2f}'.format(1)
'1.00'

'%.2f' % 1
'1.00'

'%6.2f' % 1
'  1.00'

'%6.2f0' % 1
'  1.000'

'%06.2f' % 1
'001.00'

'%-06.2f' % 1
'1.00  '

'%0-6.2f' % 1
'1.00  '   # 0未生效

'%+6.2f' % 1
' +1.00'

'%o' % 8
'10'

'%X' % 15
'F'

'%x' % 15
'f'

'%e' % 10
'1.000000e+01'

'%E' % 10
'1.000000E+01'

'%d' % 10.9
'10'

'%f' % 10.9
'10.900000'


'%.2f' % 123.355
'123.36'

'%.2f' % 0.125
'0.12'

'%.2f' % Decimal(str(0.125))
'0.12'

'%.2f' % Decimal(str(123.355))
'123.36'


精度问题
from decimal import Decimal

print(Decimal(0.1))
0.1000000000000000055511151231257827021181583404541015625

print(Decimal(str(0.1)))
0.1